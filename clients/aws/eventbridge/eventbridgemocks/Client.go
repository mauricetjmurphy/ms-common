// Code generated by mockery v2.14.0. DO NOT EDIT.

package eventbridgemocks

import (
	context "context"

	eventbridge "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// PutEvents provides a mock function with given fields: _a0, _a1
func (_m *Client) PutEvents(_a0 context.Context, _a1 *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *eventbridge.PutEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutEventsInput) *eventbridge.PutEventsOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutEventsInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
