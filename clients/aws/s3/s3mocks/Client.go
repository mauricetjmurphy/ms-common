// Code generated by mockery v2.14.0. DO NOT EDIT.

package s3mocks

import (
	context "context"

	s3 "github.com/NBCUniversal/gvs-ms-common/clients/aws/s3"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetKeys provides a mock function with given fields: _a0, _a1
func (_m *Client) GetKeys(_a0 context.Context, _a1 *s3.GetKeysParam) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, *s3.GetKeysParam) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3.GetKeysParam) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: _a0, _a1
func (_m *Client) GetObject(_a0 context.Context, _a1 *s3.GetObjectParam) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *s3.GetObjectParam) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3.GetObjectParam) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectV2 provides a mock function with given fields: _a0, _a1
func (_m *Client) GetObjectV2(_a0 context.Context, _a1 s3.GetObjectRequest) (s3.GetObjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 s3.GetObjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, s3.GetObjectRequest) s3.GetObjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(s3.GetObjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, s3.GetObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectsAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) GetObjectsAsync(_a0 context.Context, _a1 *s3.GetObjectsAsyncParam) ([]*s3.Item, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*s3.Item
	if rf, ok := ret.Get(0).(func(context.Context, *s3.GetObjectsAsyncParam) []*s3.Item); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*s3.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3.GetObjectsAsyncParam) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresignURL provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPresignURL(_a0 context.Context, _a1 *s3.GetPresignURLRequest) (s3.GetPresignURLResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 s3.GetPresignURLResponse
	if rf, ok := ret.Get(0).(func(context.Context, *s3.GetPresignURLRequest) s3.GetPresignURLResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(s3.GetPresignURLResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3.GetPresignURLRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresignURLsAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPresignURLsAsync(_a0 context.Context, _a1 *s3.GetPresignURLsAsyncRequest) (s3.GetPresignURLsAsyncResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 s3.GetPresignURLsAsyncResponse
	if rf, ok := ret.Get(0).(func(context.Context, *s3.GetPresignURLsAsyncRequest) s3.GetPresignURLsAsyncResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(s3.GetPresignURLsAsyncResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3.GetPresignURLsAsyncRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: _a0, _a1
func (_m *Client) PutObject(_a0 context.Context, _a1 s3.PutObjectRequest) (s3.PutObjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 s3.PutObjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, s3.PutObjectRequest) s3.PutObjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(s3.PutObjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, s3.PutObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
