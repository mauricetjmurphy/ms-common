// Code generated by mockery v2.14.0. DO NOT EDIT.

package sqsmocks

import (
	context "context"

	servicesqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: ctx, message
func (_m *Client) DeleteMessage(ctx context.Context, message types.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiveMessages provides a mock function with given fields: ctx, maxReceivedMessages
func (_m *Client) ReceiveMessages(ctx context.Context, maxReceivedMessages int) (*servicesqs.ReceiveMessageOutput, error) {
	ret := _m.Called(ctx, maxReceivedMessages)

	var r0 *servicesqs.ReceiveMessageOutput
	if rf, ok := ret.Get(0).(func(context.Context, int) *servicesqs.ReceiveMessageOutput); ok {
		r0 = rf(ctx, maxReceivedMessages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicesqs.ReceiveMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, maxReceivedMessages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, message
func (_m *Client) SendMessage(ctx context.Context, message *servicesqs.SendMessageInput) (*servicesqs.SendMessageOutput, error) {
	ret := _m.Called(ctx, message)

	var r0 *servicesqs.SendMessageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *servicesqs.SendMessageInput) *servicesqs.SendMessageOutput); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicesqs.SendMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *servicesqs.SendMessageInput) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
