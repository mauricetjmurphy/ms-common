// Code generated by mockery v2.14.0. DO NOT EDIT.

package sftpmocks

import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: path, flag
func (_m *Client) Get(path string, flag int) ([]byte, error) {
	ret := _m.Called(path, flag)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, int) []byte); ok {
		r0 = rf(path, flag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(path, flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: data, path, flag
func (_m *Client) Put(data []byte, path string, flag int) (int64, error) {
	ret := _m.Called(data, path, flag)

	var r0 int64
	if rf, ok := ret.Get(0).(func([]byte, string, int) int64); ok {
		r0 = rf(data, path, flag)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string, int) error); ok {
		r1 = rf(data, path, flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
